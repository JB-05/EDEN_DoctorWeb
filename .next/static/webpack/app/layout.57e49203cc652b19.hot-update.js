"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./lib/supabase.ts":
/*!*************************!*\
  !*** ./lib/supabase.ts ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   auth: function() { return /* binding */ auth; },\n/* harmony export */   db: function() { return /* binding */ db; },\n/* harmony export */   supabase: function() { return /* binding */ supabase; }\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(app-pages-browser)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\n// Fallback values for demo mode when Supabase is not configured\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || \"https://demo.supabase.co\";\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || \"demo-key\";\n// Create Supabase client with error handling\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey, {\n    auth: {\n        autoRefreshToken: true,\n        persistSession: true,\n        detectSessionInUrl: true\n    }\n});\n// Auth helper functions with error handling\nconst auth = {\n    signIn: async (email, password)=>{\n        try {\n            if (supabaseUrl === \"https://demo.supabase.co\") {\n                // Demo mode - always return error to fall back to mock auth\n                throw new Error(\"Demo mode - using mock authentication\");\n            }\n            const { data, error } = await supabase.auth.signInWithPassword({\n                email,\n                password\n            });\n            return {\n                data,\n                error\n            };\n        } catch (error) {\n            return {\n                data: null,\n                error: {\n                    message: error.message || \"Supabase not configured\"\n                }\n            };\n        }\n    },\n    signOut: async ()=>{\n        try {\n            if (supabaseUrl === \"https://demo.supabase.co\") {\n                return {\n                    error: null\n                };\n            }\n            const { error } = await supabase.auth.signOut();\n            return {\n                error\n            };\n        } catch (error) {\n            return {\n                error: {\n                    message: error.message || \"Supabase not configured\"\n                }\n            };\n        }\n    },\n    getUser: async ()=>{\n        try {\n            if (supabaseUrl === \"https://demo.supabase.co\") {\n                return {\n                    user: null,\n                    error: null\n                };\n            }\n            const { data: { user }, error } = await supabase.auth.getUser();\n            return {\n                user,\n                error\n            };\n        } catch (error) {\n            return {\n                user: null,\n                error: {\n                    message: error.message || \"Supabase not configured\"\n                }\n            };\n        }\n    },\n    getSession: async ()=>{\n        try {\n            if (supabaseUrl === \"https://demo.supabase.co\") {\n                return {\n                    session: null,\n                    error: null\n                };\n            }\n            const { data: { session }, error } = await supabase.auth.getSession();\n            return {\n                session,\n                error\n            };\n        } catch (error) {\n            return {\n                session: null,\n                error: {\n                    message: error.message || \"Supabase not configured\"\n                }\n            };\n        }\n    }\n};\n// Database helper functions with error handling\nconst db = {\n    // Patients\n    getPatients: async (doctorId)=>{\n        try {\n            if (supabaseUrl === \"https://demo.supabase.co\") {\n                return {\n                    data: [],\n                    error: {\n                        message: \"Demo mode - no database available\"\n                    }\n                };\n            }\n            const { data, error } = await supabase.from(\"patients\").select(\"*\").eq(\"assigned_doctor_id\", doctorId).order(\"name\");\n            return {\n                data,\n                error\n            };\n        } catch (error) {\n            return {\n                data: [],\n                error: {\n                    message: error.message || \"Database not available\"\n                }\n            };\n        }\n    },\n    getPatient: async (patientId)=>{\n        try {\n            if (supabaseUrl === \"https://demo.supabase.co\") {\n                return {\n                    data: null,\n                    error: {\n                        message: \"Demo mode - no database available\"\n                    }\n                };\n            }\n            const { data, error } = await supabase.from(\"patients\").select(\"*\").eq(\"id\", patientId).single();\n            return {\n                data,\n                error\n            };\n        } catch (error) {\n            return {\n                data: null,\n                error: {\n                    message: error.message || \"Database not available\"\n                }\n            };\n        }\n    },\n    // Medications\n    getPatientMedications: async (patientId)=>{\n        try {\n            if (supabaseUrl === \"https://demo.supabase.co\") {\n                return {\n                    data: [],\n                    error: {\n                        message: \"Demo mode - no database available\"\n                    }\n                };\n            }\n            const { data, error } = await supabase.from(\"medications\").select(\"*\").eq(\"patient_id\", patientId).eq(\"is_active\", true).order(\"name\");\n            return {\n                data,\n                error\n            };\n        } catch (error) {\n            return {\n                data: [],\n                error: {\n                    message: error.message || \"Database not available\"\n                }\n            };\n        }\n    },\n    // Medication Logs\n    getMedicationLogs: async function(patientId) {\n        let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 50;\n        try {\n            if (supabaseUrl === \"https://demo.supabase.co\") {\n                return {\n                    data: [],\n                    error: {\n                        message: \"Demo mode - no database available\"\n                    }\n                };\n            }\n            const { data, error } = await supabase.from(\"medication_logs\").select(\"\\n        *,\\n        medications (name, dosage)\\n      \").eq(\"patient_id\", patientId).order(\"scheduled_time\", {\n                ascending: false\n            }).limit(limit);\n            return {\n                data,\n                error\n            };\n        } catch (error) {\n            return {\n                data: [],\n                error: {\n                    message: error.message || \"Database not available\"\n                }\n            };\n        }\n    },\n    // Symptom Reports\n    getSymptomReports: async function(patientId) {\n        let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 20;\n        try {\n            if (supabaseUrl === \"https://demo.supabase.co\") {\n                return {\n                    data: [],\n                    error: {\n                        message: \"Demo mode - no database available\"\n                    }\n                };\n            }\n            const { data, error } = await supabase.from(\"symptom_reports\").select(\"*\").eq(\"patient_id\", patientId).order(\"reported_at\", {\n                ascending: false\n            }).limit(limit);\n            return {\n                data,\n                error\n            };\n        } catch (error) {\n            return {\n                data: [],\n                error: {\n                    message: error.message || \"Database not available\"\n                }\n            };\n        }\n    },\n    // Doctor Notes\n    getDoctorNotes: async (patientId)=>{\n        try {\n            if (supabaseUrl === \"https://demo.supabase.co\") {\n                return {\n                    data: [],\n                    error: {\n                        message: \"Demo mode - no database available\"\n                    }\n                };\n            }\n            const { data, error } = await supabase.from(\"doctor_notes\").select(\"*\").eq(\"patient_id\", patientId).order(\"created_at\", {\n                ascending: false\n            });\n            return {\n                data,\n                error\n            };\n        } catch (error) {\n            return {\n                data: [],\n                error: {\n                    message: error.message || \"Database not available\"\n                }\n            };\n        }\n    },\n    addDoctorNote: async (note)=>{\n        try {\n            if (supabaseUrl === \"https://demo.supabase.co\") {\n                return {\n                    data: null,\n                    error: {\n                        message: \"Demo mode - no database available\"\n                    }\n                };\n            }\n            const { data, error } = await supabase.from(\"doctor_notes\").insert(note).select().single();\n            return {\n                data,\n                error\n            };\n        } catch (error) {\n            return {\n                data: null,\n                error: {\n                    message: error.message || \"Database not available\"\n                }\n            };\n        }\n    },\n    // Virtual Meetings\n    getUpcomingMeetings: async (doctorId)=>{\n        try {\n            if (supabaseUrl === \"https://demo.supabase.co\") {\n                return {\n                    data: [],\n                    error: {\n                        message: \"Demo mode - no database available\"\n                    }\n                };\n            }\n            const { data, error } = await supabase.from(\"virtual_meetings\").select(\"\\n        *,\\n        patients (name)\\n      \").eq(\"doctor_id\", doctorId).eq(\"status\", \"scheduled\").gte(\"scheduled_time\", new Date().toISOString()).order(\"scheduled_time\");\n            return {\n                data,\n                error\n            };\n        } catch (error) {\n            return {\n                data: [],\n                error: {\n                    message: error.message || \"Database not available\"\n                }\n            };\n        }\n    },\n    createMeeting: async (meeting)=>{\n        try {\n            if (supabaseUrl === \"https://demo.supabase.co\") {\n                return {\n                    data: null,\n                    error: {\n                        message: \"Demo mode - no database available\"\n                    }\n                };\n            }\n            const { data, error } = await supabase.from(\"virtual_meetings\").insert(meeting).select().single();\n            return {\n                data,\n                error\n            };\n        } catch (error) {\n            return {\n                data: null,\n                error: {\n                    message: error.message || \"Database not available\"\n                }\n            };\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/supabase.ts\n"));

/***/ })

});